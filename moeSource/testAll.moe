#import "basic"
#import "string"


TestOperators proc ()
{
	printf("Operators:\n")

	nPre : s32
	nPost : s32
	while nPre < 5
	{
		assert(++nPre == nPost++ + 1, "pre/post increment tests", #file, #line)
	}

	fTrue := true
	assert(fTrue && !fTrue == false && !!fTrue == true, "basic boolean tests", #file, #line)
	assert((6|9 == 15) && (6&2 == 2), "bad bitwise operators", #file, #line)


	n64 := 64
	assert((n64>>2 == 16) && (n64<<2 == 256), "bad shift operators", #file, #line)

	assert(
		(true || true) == true &&  
		(true || false) == true &&
		(false || true) == true &&
		(false || false) == false, "bad constant literal logical ops", #file, #line)

	assert(
		(true && true) == true &&  
		(true && false) == false &&
		(false && true) == false &&
		(false && false) == false, "bad constant literal logical ops", #file, #line)
}

TestPointers proc ()
{
	printf("Pointers:\n")

	n : s64 = 456
	pN := &n
	ppN := &pN
	assert(@pN == 456, "pointer dereference failure", #file, #line)

	n = 123
	assert(@pN == 123, "pointer dereference failure", #file, #line)

	@pN = 600
	assert(@pN == 600, "pointer dereference failure", #file, #line)

	@@ppN = 890
	assert(@pN == 890, "ppN pointer dereference failure", #file, #line)

	pB : & u8 = null
	fIsNull := (pB == null)
	fNotPtr := !pB
	assert(pB == null && fIsNull == true && fNotPtr == true, "pointer null failure", #file, #line)

	PointStruct struct
	{
		m_n : s32
	}

	pointstruct : PointStruct
	pPointstruct : & PointStruct = &pointstruct

	pointstruct.m_n = 1234
	assert(pPointstruct.m_n == 1234, "member dereference failure", #file, #line)

	pPointstruct.m_n = 4567
	assert(pointstruct.m_n == 4567, "member dereference failure", #file, #line)

	// void pointers
	
	n = 1234
	pN = &n
	pV : & void = pN

	assert(pN == pV, "bad null pointer assignment", #file, #line)

	aN := {1,2,3}
//	pN = aN
//	pV = aN
//	assert(pN == pV && pN == aN, "bad null pointer array assignment", #file, #line)
}

TestNestedMethod proc ()
{
	NestedMethod proc (n : s32) -> s32
	{
		assert(n == 20, "bad nested method call", #file, #line)
		return 2 * n
	}

	i := 0
	nSum := 0
	while i < 3
	{
		nSum += NestedMethod(20)
		++i
	}
	assert(nSum == 120, "bad nested method call", #file, #line)
}

FAppend proc (ppCh: && u8, pChz: & const u8, fArg: bool) -> bool
{
	@@ppCh = pChz[0]
	@ppCh = @ppCh + 1
	return fArg
}

TestIfElse proc ()
{
	printf("If/Else:\n")

	cLoop immutable := 4
	aN: [cLoop] int
	for i:= 0; i < cLoop; ++i
	{
		if i == 0
			{ aN[i] = 0 }
		else if i < 2
			{ aN[i] = 1 }
		else
			{ aN[i] = 2 }
	}
	assert(aN[0] == 0 && aN[1] == 1 && aN[2] == 2 && aN[3] == 2, "bad else if", #file, #line)

	aCh: [16] u8
	pCh: & u8 = aCh
	if (FAppend(&pCh, "A", false) && FAppend(&pCh, "X", false)) && FAppend(&pCh, "X", true)
	{
		assert(false, "else/if failed", #file, #line)
	}
	else if FAppend(&pCh, "B", false) || (FAppend(&pCh, "C", true) && FAppend(&pCh, "D", true))
	{
		FAppend(&pCh, "E", false)
	}

	if false
	{
		assert(false, "should never fire", #file, #line)
	}
	@pCh = '\0'
//	assert(FAreCozEqual(aCh, "ABCDE"), "Short circuit test failed", #file, #line)

	pChzNums := "012345"
	pCh = aCh
	n: int = 0
	while FAppend(&pCh, "A", false) || FAppend(&pCh, "B", true) && n < 3
	{
		FAppend(&pCh, pChzNums + n, true)
		FAppend(&pCh, "-", true)
		++n
	}
	@pCh = '\0'
//	assert(FAreCozEqual(aCh, "AB0-AB1-AB2-AB"), "Short circuit test failed", #file, #line)

	fT1 := true
	fT2 := true
	fF1 := false
	assert((fT1 && fT2 && fF1) == false, "bad short circuit", #file, #line)
	assert((fF1 || fT1) == true, "bad short circuit", #file, #line)

}

TestInitializers proc ()
{
	printf("Initializers:\n")

	// simple types  
	nZero : int
	nInit := 21
	nInst := nInit

	assert(nZero == 0, "bad init", #file, #line)
	assert(nZero == 0, "bad init", #file, #line)
	assert(nInit == 21, "bad init", #file, #line)
	assert(nInst == 21, "bad init", #file, #line)

	// local arrays
	aNZero : [5] int	
	aNInit := :[]int { 1, 2, 3, 4, 5}

	assert(aNZero[0] == 0 && aNZero[1] == 0 && aNZero[2] == 0 && aNZero[3] == 0 && aNZero[4] == 0, "bad init", #file, #line)
	//printf("aNInit = {%d, %d, %d, %d, %d}\n",aNInit[0], aNInit[1], aNInit[2], aNInit[3], aNInit[4])
	assert(aNInit[0] == 1 && aNInit[1] == 2 && aNInit[2] == 3 && aNInit[3] == 4 && aNInit[4] == 5, "bad init", #file, #line)

	aNCopy := aNInit
	assert(aNCopy[0] == 1 && aNCopy[1] == 2 && aNCopy[2] == 3 && aNCopy[3] == 4 && aNCopy[4] == 5, "bad init", #file, #line)

	aNRef: [] int		
	assert(aNRef.data == null && aNRef.count == 0, "bad array ref init", #file, #line)
	aNRef : [] int = aNCopy

	aNRef2: [] const int = {2,4,6,8,10}
	assert(aNRef2[0] == 2 && aNRef2[1] == 4 && aNRef2[2] == 6 && aNRef2[3] == 8 && aNRef2[4] == 10, "bad init", #file, #line)

	// local struct instance 
	SNested struct
	{
		m_nA := 1234
		m_nB := 4567
	}

	SSimpleInit struct // simp
	{
		m_n0: int = 1
		m_n1: int = 2
		m_n2: int = 4
		m_nest: SNested
	}

	simp : SSimpleInit
	assert(simp.m_n0 == 1 && simp.m_n1 == 2 && simp.m_n2 == 4, "bad struct init", #file, #line)
	assert(simp.m_nest.m_nA == 1234 && simp.m_nest.m_nB == 4567, "bad nested struct init", #file, #line)

	simp.m_n0 = 13
	simpCopy := simp
	assert(simpCopy.m_n0 == 13 && simpCopy.m_n1 == 2 && simpCopy.m_n2 == 4, "bad struct init", #file, #line)
	assert(simpCopy.m_nest.m_nA == 1234 && simpCopy.m_nest.m_nB == 4567, "bad nested struct init", #file, #line)

	// struct with array member
	SBarZero struct
	{
		m_aN: [6] int
	}

	SBarInit struct
	{
		m_aN := :[]int { 1, 2, 3, 4, 5}
	}

	barzero: SBarZero
	barinit: SBarInit

	assert(barzero.m_aN[0] == 0 && barzero.m_aN[1] == 0 && barzero.m_aN[2] == 0 && barzero.m_aN[3] == 0 && barzero.m_aN[4] == 0, "bad init", #file, #line)
	assert(barinit.m_aN[0] == 1 && barinit.m_aN[1] == 2 && barinit.m_aN[2] == 3 && barinit.m_aN[3] == 4 && barinit.m_aN[4] == 5, "bad init", #file, #line)

	barinit.m_aN[0] = 13
	barinitCopy := barinit
	assert(barinitCopy.m_aN[0] == 13 && barinitCopy.m_aN[1] == 2 && barinitCopy.m_aN[2] == 3 && barinitCopy.m_aN[3] == 4 && barinitCopy.m_aN[4] == 5, "bad init", #file, #line)

	aBarzero: [5] SBarZero
	aBarinit: [5] SBarInit

	abarinitRef: [] SBarInit = aBarinit // failed

	for iBarzero := 0; iBarzero < aBarzero.count; ++iBarzero
	{
		assert(aBarzero[iBarzero].m_aN[0] == 0 && 
				aBarzero[iBarzero].m_aN[1] == 0 && 
				aBarzero[iBarzero].m_aN[2] == 0 && 
				aBarzero[iBarzero].m_aN[3] == 0 && 
				aBarzero[iBarzero].m_aN[4] == 0, "bad init", #file, #line)

		pBarinit := &aBarinit[iBarzero]
		//printf("aBarinit[%d] = {%d, %d, %d, %d, %d}\n", iBarzero, pBarinit.m_aN[0], pBarinit.m_aN[1], pBarinit.m_aN[2], pBarinit.m_aN[3], pBarinit.m_aN[4])
		assert(pBarinit.m_aN[0] == 1 && pBarinit.m_aN[1] == 2 && pBarinit.m_aN[2] == 3 && pBarinit.m_aN[3] == 4 && pBarinit.m_aN[4] == 5, "bad init", #file, #line)

		assert(pBarinit.m_aN[0] == 1 && pBarinit.m_aN[1] == 2 && pBarinit.m_aN[2] == 3 && pBarinit.m_aN[3] == 4 && pBarinit.m_aN[4] == 5, "bad init", #file, #line)
	}
}

TestStructures proc ()
{
	printf("Structures:\n")

	SChild struct
	{
		m_n : s32
		m_pChildSelf : & SChild
	}

	SRoot struct
	{
		m_child : SChild
		m_pRootSelf : & SRoot
	}

	root : SRoot
	root.m_pRootSelf = &root
	root.m_child.m_pChildSelf = &root.m_child

	root.m_child.m_n = 1234

	assert(root.m_child.m_n == root.m_pRootSelf.m_pRootSelf.m_child.m_pChildSelf.m_pChildSelf.m_n,
			"member pointer dereference fail", #file, #line)

	SOuter struct
	{
	 	m_n : s8

	 	SNested struct
	 	{
	 		NestedCount immutable := 3
	 		m_nNested := 17
	 	}
	}

	assert(SOuter.SNested.NestedCount == 3, "bad nested constant", #file, #line)

	aNest : [SOuter.SNested.NestedCount] SOuter.SNested
	for iNest := 0; iNest < SOuter.SNested.NestedCount; ++iNest
	{
		assert(aNest[iNest].m_nNested == 17, "nested initializer fail", #file, #line)
	}

	SShallowCopy struct
	{
		m_f : bool
		m_n : int
		m_aN : [2] s16
		m_outer : SOuter
	}

	shallowSrc : SShallowCopy
	shallowSrc.m_f = true
	shallowSrc.m_n = 123
	shallowSrc.m_aN[0] = 444
	shallowSrc.m_aN[1] = 555
	shallowSrc.m_outer.m_n = 127

	shallowDst : SShallowCopy
	shallowDst = shallowSrc

	assert(shallowDst.m_f == true, "shallow copy failed", #file, #line)
	assert(shallowDst.m_n == 123, "shallow copy failed", #file, #line)
	assert(shallowDst.m_aN[0] == 444, "shallow copy failed", #file, #line)
	assert(shallowDst.m_aN[1] == 555, "shallow copy failed", #file, #line)
	assert(shallowDst.m_outer.m_n == 127, "shallow copy failed", #file, #line)
}

TestRecursion proc ()
{
	printf("Recursion:\n")

	NFactorial proc (n : int) -> int
	{
		if n > 1
		{
			return n * NFactorial(n-1)
		}
		return 1
	}

	assert(NFactorial(4) == 24, "recursion test failed", #file, #line)

	aN: [5] int
	pN := aN.data

	MethodA proc (n : int, ppN: && int)
	{
		if (n > 0)	
		{
			MethodB(n-1, ppN)
		}
	}

	MethodB proc (n : int, ppN: && int)
	{

		@@ppN = n
		++(@ppN)
		MethodA(n, ppN)
	}

	MethodA(5, &pN)
	iExpected := 4
	for i := 0; i < aN.count; ++i
	{
		assert(aN[i] == iExpected, "recursion test failure", #file, #line)
		--iExpected
	}
}

TestTypedefs proc ()
{
	printf("Typedefs:\n")

	// BB - no typedef tests?
}

PrintStringArray proc (pChzLabel : & u8, aPchz : [] & u8)
{
	printf("%s[%d] = {", pChzLabel, aPchz.count)
	n : int
	while n < aPchz.count
	{
		printf("%s", aPchz[n])
		++n
		if n < aPchz.count
		{
			printf(", ")
		}
	}
	printf("}\n")
}

CopyIntArray proc (aN : [] const int, ppN: && int)
{
	for iN := 0; iN < aN.count; ++iN
	{
		@@ppN = aN[iN]
		(@ppN)++
	}
}

TestEnums proc ()
{
	printf("Enumerations:\n")

	ENUMK enum int
	{
		Ack 		:= 0,
		Bah 		:= Ack+1,
		Ugh,	
		Guh 		:= Bah + Ugh,
		Four 		:= SLater.ConstFour,
		Final
	}

	enumkTest : ENUMK
	//enumkTest = 2					// should not work
	//enumkTest = SOuter.MEMB.Two 	// should not work

	assert(SLater.MEMB.One == 1, "enum value test failed", #file, #line)
	assert(SLater.MEMB.Two == 2, "enum value test failed", #file, #line)
	assert(SLater.MEMB.Three == 3, "enum value test failed", #file, #line)

	assert(ENUMK.Ack == 0, "enum value test failed", #file, #line)
	assert(ENUMK.Bah == 1, "enum value test failed", #file, #line)
	assert(ENUMK.Ugh == 2, "enum value test failed", #file, #line)
	assert(ENUMK.Guh == 3, "enum value test failed", #file, #line)
	assert(ENUMK.Four == 4, "enum value test failed", #file, #line)
	assert(ENUMK.Final == 5, "enum value test failed", #file, #line)
	assert(ENUMK.nil == -1, "enum value test failed", #file, #line)
	assert(ENUMK.min == 0, "enum value test failed", #file, #line)
	assert(ENUMK.last == 5, "enum value test failed", #file, #line)
	assert(ENUMK.max == 6, "enum value test failed", #file, #line)

	aPchzNames := {"Ack", "Bah", "Ugh", "Guh", "Four", "Final"}
	assert(ENUMK.names.count == 6, "bad array name count", #file, #line)
	for ipChzNames := 0; ipChzNames < ENUMK.names.count; ++ipChzNames
	{
		assert(ENUMK.values[ipChzNames] == ipChzNames, "bad enum value", #file, #line)	
//		assert(FAreCozEqual(ENUMK.names[ipChzNames], aPchzNames[ipChzNames]), "bad enum value", #file, #line)	
	}
}

TestArrays proc () 
{
	printf("Arrays:\n")

	aN : [5] int
	for iN := 0; iN < aN.count; ++iN
	{
		assert(aN[iN] == 0, "array init fail (allZeros)", #file, #line)
	}

	aNRef : [] int = aN

	for iN := 0; iN < aN.count; ++iN
	{
		aN[iN] = iN * 2
	}

	for iN := 0; iN < aN.count; ++iN
	{
		assert(aN[iN] == iN * 2, "array init fail (values)", #file, #line)
		assert(aNRef[iN] == iN * 2, "array init fail (anRef)", #file, #line)
	}

	assert(aN.data == aNRef.data, "array with bad data member", #file, #line)

	ConstAry immutable := { 1, 2, 3, 4}
	for iN := 0; iN < ConstAry.count; ++iN
	{
		ConstAry[iN] == iN + 1
	}

	aNExplicit : [] const int = {2, 4, 5}
	for iN := 0; iN < aNExplicit.count; ++iN
	{
		aNExplicit[iN] == iN + 2
	}

	aNInferred : [] const int = {2, 4, 5}
	for iN := 0; iN < aNInferred.count; ++iN
	{
		aNInferred[iN] == iN + 2
	}

	aNTerse := {2, 4, 5}
	for iN := 0; iN < aNTerse.count; ++iN
	{
		aNTerse[iN] == iN + 2
	}

	aNBuffer: [10] int
	pN : & int = aNBuffer
	CopyIntArray({3,4,4567, 2}, &pN)
	for iN := 0; iN < aNTerse.count; ++iN
	{
		aNTerse[iN] == aNBuffer[iN]
	}


	kN immutable := {1, 2, 3, 4}

	aN1: [4] int = {1, 2, 3, 4}
	aN2: [] const int = {1, 2, 3, 4}
	aN3 := {1, 2, 3, 4}
	aN4 := :[]int { 1, 2, 3, 4}
	aN5 := kN

	aN6 : [] int
	aN7 : [] const int
	aN8 : [] int
	aN9 : [] int
	aN6 = aN1
	aN7 = aN2
	aN8 = {1, 2, 3, 4}
	aN9 = kN

	pN1: & int = aN1
	pN2: & const int = aN2
	pN3: & const int = {1, 2, 3, 4}
	pN4: & const int = kN
	pN5: & const int = aN5

	for iN := 0; iN < aN1.count; ++iN
	{
		n := aN1[iN]
//		assert(kN[iN] == n, "bad array lookup", #file, #line)

		assert(aN2[iN] == n, "bad array lookup", #file, #line)
		assert(aN3[iN] == n, "bad array lookup", #file, #line)
		assert(aN4[iN] == n, "bad array lookup", #file, #line)
		assert(aN5[iN] == n, "bad array lookup", #file, #line)
		assert(aN6[iN] == n, "bad array lookup", #file, #line)
		assert(aN7[iN] == n, "bad array lookup", #file, #line)
		assert(aN8[iN] == n, "bad array lookup", #file, #line)
		assert(aN9[iN] == n, "bad array lookup", #file, #line)

		assert(pN1[iN] == n, "bad array lookup", #file, #line)
		assert(pN2[iN] == n, "bad array lookup", #file, #line)
		assert(pN3[iN] == n, "bad array lookup", #file, #line)
		assert(pN4[iN] == n, "bad array lookup", #file, #line)
		assert(pN5[iN] == n, "bad array lookup", #file, #line)
	}
	
}

FIsNear proc (gA: float, gB: float) -> bool
{
	return GAbs(gA - gB) < 0.00001
}

TestCasting proc () 
{
	printf("Explicit Casts:\n")

	SFoo struct
	{
		m_a : int
		m_b : int
	}

	g := 12.5
	n := cast(int) g
	g2 := cast(float) n
	assert(FIsNear(g, 12.5) && n == 12 && FIsNear(g2, 12), "numeric casting failed", #file, #line)

	n = 256 + 22
	n2 : s8 = cast(s8) n
	assert(n2 == 22, "overflow cast", #file, #line)

	foo : SFoo
	foo.m_a = 1234
	foo.m_b = 5678

	pN := cast(&int) &foo
	assert(pN[0] == 1234 && pN[1] == 5678, "cast failed", #file, #line)
	assert((cast (&SFoo)pN).m_a == 1234 && (cast (&SFoo)pN).m_b == 5678, "cast failed", #file, #line)

	pFoo := cast(&SFoo) pN
	assert(pFoo.m_a == 1234 && pFoo.m_b == 5678, "cast failed", #file, #line)

	gAcast : f32 = acast acast n
	nAcast : int = acast acast g
	assert(FIsNear(gAcast, 278) && nAcast == 12, "acast failed", #file, #line)
}

OVERK enum
{
	Int32,
	Int16,
	Float,
	String,
}

TestOverloading proc ()
{
	printf("Overloading:\n")

	n: s16 = 5
	assert(OverkTest(n) == OVERK.Int16, "Overload resolution failed", #file, #line)
	assert(OverkTest(2) == OVERK.Int32, "Overload resolution failed", #file, #line)
	assert(OverkTest(2.2) == OVERK.Float, "Overload resolution failed", #file, #line)
	assert(OverkTest("test") == OVERK.String, "Overload resolution failed", #file, #line)
}

OverkTest proc (n: s16) -> OVERK 			{return OVERK.Int16 }
OverkTest proc (n: int) -> OVERK 			{return OVERK.Int32 }
OverkTest proc (g: float) -> OVERK 			{return OVERK.Float }
OverkTest proc (pChz: & const u8) -> OVERK 	{return OVERK.String }



SOverload struct // tag ovr
{
	m_n: int
	m_cAssignment: int 
	m_cDecl: int 
}

operator + (ovrLhs: SOverload, ovrRhs: SOverload) -> SOverload
{
	ovrRet : SOverload
	ovrRet.m_n = ovrLhs.m_n + ovrRhs.m_n
	return ovrRet
}

operator * (ovrLhs: SOverload, n: int) -> SOverload #commutative
{
	ovrRet : SOverload
	ovrRet.m_n = ovrLhs.m_n * n
	return ovrRet
}

operator = (pOvrLhs: & SOverload, ovrRhs: SOverload) //#infer :=
{
	pOvrLhs.m_cAssignment = ovrRhs.m_cAssignment + 1
	pOvrLhs.m_n = ovrRhs.m_n
}

operator := (pOvrLhs: & SOverload, ovrRhs: SOverload) //#infer =
{
	pOvrLhs.m_cDecl = ovrRhs.m_cDecl + 1
	pOvrLhs.m_cAssignment = ovrRhs.m_cAssignment
	pOvrLhs.m_n = ovrRhs.m_n
}

operator ++ (pOvr: & SOverload)->SOverload
{
	++pOvr.m_n	
	return @pOvr
}

operator -(ovr: SOverload) -> SOverload 
{
	ovr.m_n = -ovr.m_n
	return ovr
}

operator @(ovr: SOverload) -> int
{
	return 22
}

operator !(ovr: SOverload) -> bool
{
	return false
}

operator << (ovrLhs: SOverload, nBits: int) -> SOverload
{
	ovrLhs.m_n = ovrLhs.m_n << nBits
	return ovrLhs
}

operator < (ovrLhs: SOverload, ovrRhs: SOverload) -> bool
{
	return ovrLhs.m_n < ovrRhs.m_n	
}



TestOperatorOverloading proc ()
{
	printf("Operator Overloading:\n")

	//ovrA, ovrB: SOverload
	ovrA: SOverload
	ovrB: SOverload
	ovrA.m_n = 5
	ovrB.m_n = 90	
	ovr := ovrA + ovrB
	assert(ovr.m_n == 95, "operator overload failure", #file, #line)

	assert(ovr.m_cDecl == 1, "init operator not called", #file, #line)
	assert(ovr.m_cAssignment == 0, "decl init doesn't call the assignment operator", #file, #line)

	assert(ovrA < ovrB, "bad comparison", #file, #line)

	ovrShift := ovr << 2
	assert(ovrShift.m_n == 380, "operator overload failure", #file, #line)


	ovr = ovr * 10
	ovr = 10 * ovr // test commutative
	assert(ovr.m_n == 9500 , "operator overload failure", #file, #line)

	gA := 2.2
	gB := 4.2
	gR := ovrA.m_n + ovrB.m_n

//	ovrPost := ovr++
//	assert(ovrPost.m_n == 9500 && ovrPost.m_cDecl == 2, "operator overload failure", #file, #line)
//	assert(ovr.m_n == 9501 && ovr.m_cDecl == 1, "operator overload failure", #file, #line)

//	ovrPre := ++ovr
//	assert(ovrPre.m_n == 9502 && ovrPre.m_cDecl == 2, "operator overload failure", #file, #line)
//	assert(ovr.m_n == 9502 && ovr.m_cDecl == 1, "operator overload failure", #file, #line)

	ovrNeg := -ovr
	assert(ovrNeg.m_n == -9502 && ovrNeg.m_cAssignment == 1, "operator overload failure", #file, #line)

	// Don't do this! Why would you do this?
	nDeref: int = @ovr
	assert(nDeref == 22, "expected 22", #file, #line)

	fFalse: bool = !ovr
	assert(fFalse == false, "expected false", #file, #line)
}

TestGlobals proc ()
{
	printf("Global initialization:\n")
	assert(g_n == 15, "global init failed", #file, #line)
	assert(g_aN[0] == 2 && g_aN[1] == 4 && g_aN[2] == 5, "global init failed", #file, #line)

	assert(g_glob.m_n == 2 && g_glob.m_nUninit == 0 && g_glob.m_n2 == 456, "global init failed", #file, #line)
	for iGlob := 0; iGlob < g_aGlob.count; ++iGlob
	{
		assert(g_aGlob[iGlob].m_n == 2 && g_aGlob[iGlob].m_n2 == 456, "global array init failed", #file, #line)
	}
}

g_n : s32 =15
g_aN := :[]s32 { 2, 4, 5} // array globals

SGlobal struct
{
	m_n : s32 = 2
	m_nUninit : s32 = ---
	m_n2 := 456
}

g_glob : SGlobal // struct globals

g_aGlob : [4] SGlobal // array of struct globals

CallByReference proc (n: int) -> int
{
	pFnSelfTest := CallByReference // test pointer to self procedure

	return n
}

CallByReferenceMultiple proc (nA: int, nB: int) -> int
{
	return nA * 2 + nB
}

PassedMethod proc (pFn: (n: int)->int, n: int) -> int
{
	return pFn(n) * 10
}

SProcRefStruct struct
{
	m_pFn: (n: int)->int
}

TestFunc typedef (n: int)->int

TestProcedureRef proc () -> int 
{
	printf("ProcedureRef:\n")

	{ // Test name collisions being fixed by the procedure overload resolution
		CallByReference: (nA: int, nB: int)->int = CallByReferenceMultiple
		assert(CallByReference(100, 25) == 225, "Call by function overload resolution fail", #file, #line)
		assert(CallByReference(1234) == 1234, "Call by function fail", #file, #line)
	}

	pFnPrintf := printf
	pFnPrintf("Varargs by reference %s\n", "and it works")

	pFn: (n: int)->int
	pFn = CallByReference
	assert(pFn(1111) == 1111, "Call by function fail (pFn)", #file, #line)

	ppFn: & (n: int)->int

	//ppFn = &(CallByReference) // Error: Can't take the address of constant proc address
	ppFn = &pFn
	assert((@ppFn)(2222) == 2222, "Call by function fail (ppFn)", #file, #line)
	//@ppFn("Error: Procedure call precedencce is higher than dereference")

	apFn: [2] (n: int)->int
	apFn[1] = CallByReference
	assert(apFn[1](3333) == 3333, "Call by function fail (apFn)", #file, #line)

	prs: SProcRefStruct
	prs.m_pFn = CallByReference
	assert(prs.m_pFn(4444) == 4444, "Call by function fail (prs.m_pFn)", #file, #line)

	assert(PassedMethod(CallByReference, 123) == 1230, "Passed method fail (direct)", #file, #line)
	assert(PassedMethod(pFn, 456) == 4560, "Passed method fail (pFn)", #file, #line)

	pFn2: TestFunc = CallByReference

	assert(pFn == pFn2, "procedure reference comparison fail", #file, #line)
	return 1
}

g_pChzHere immutable := #string END
This is a string
that should just work
even though it's several lines
and "contains quotes"
END

TestHereStrings proc ()
{
	printf("Here Strings:\n")

	pChzNotHere: & const u8 = "This is a string\nthat should just work\neven though it's several lines\nand \"contains quotes\"\n"
//	assert(FAreCozEqual(g_pChzHere, pChzNotHere), "here string failure", #file, #line)

	pChzTest := #string HERE
this HERE is a HERE
string inlined
HERE
	
	pChzNotHere2: & const u8 = "this HERE is a HERE\nstring inlined\n"
//	assert(FAreCozEqual(pChzTest, pChzNotHere2), "here string failure", #file, #line)
}

TestLoops proc ()
{
	printf("For Loops:\n")

	aNExpected := {1, 2, 3, 4, 5 }
	for iN := 1; iN < 1+aNExpected.count; ++iN
	{
		assert(iN == aNExpected[iN-1], "for loop fail", #file, #line)
	}

	while true
	{
		break
	}

	for i:=1; true; ++i
	{
		break	
	}

	i := 2
	iter: SIntIterator
	for_each iter = iterMake(2,5)
	{
		assert(i == iter.m_i, "iterator fail", #file, #line)
		++i	
	}

	i = 0
	iter2:= iterMake(0, 4)
	for_each iter2
	{
		assert(i == iter2.m_i, "iterator fail", #file, #line)
		++i
	}

	i = 0
	aCh: [5] char = {'T', 'e', 's', 't', 0 }
	for_each pCoz := "Test"
	{
		assert(aCh[i] == @pCoz, "iterator fail (char)", #file, #line)
		++i
	}

	i = 0
	apCoz: [6] & const u8 = {"😁Test✂", "Test✂", "est✂", "st✂", "t✂", "✂" }
	for_each pCoz := "😁Test✂"
	{
//		assert(FAreCozEqual(apCoz[i], pCoz), "iterator fail (pCoz)" , #file, #line)
		++i
	}
}

TestBreakContinue proc ()
{
	printf("Break & Continue:\n")

	aNExpected := {0, 1, 2, 5, 6}
	pN := aNExpected.data
	for_each iter := iterMake(0, 10)
	{
		if (iter.m_i == 3 || iter.m_i == 4)
			{ continue }

		assert(@pN++ == iter.m_i, "break/continue test fail", #file, #line)

		if (iter.m_i == 6)
			{ break }
	}

	i: int
	pN = aNExpected.data
	while i < 10
	{
		iPrev:= i
		++i
		if iPrev == 3 || iPrev == 4
			{ continue }

		assert(@pN++ == iPrev, "break/continue test fail", #file, #line)

		if (iPrev == 6)
			{ break }
	}

	// labels
	`Outer
	for y:=0; y<10; ++y
	{
		for x:=0; x<10; ++x
		{
			if x == 4
				{ continue Outer }

			assert(x < 4 && y < 5, "break/continue fail", #file, #line)

			if x == 3 && y == 4
				{ break Outer }
		}
		assert(false, "break/continue fail", #file, #line)
	}
}

TestSwitch proc ()
{
	VerifyArray proc (aNExpected: [] int, aNValue: [] int)
	{
		for iN := 0; iN < aNExpected.count; ++iN
		{
			assert(aNExpected[iN] == aNValue[iN], "bad array value", #file, #line)	
		}
	}

	printf("Switch:\n")

	pChz := "HelloThere"
	aCh: [32] u8
	for iCh := 0; iCh < strlen(pChz); ++iCh
		{
		switch pChz[iCh]
		{
			case 'e': aCh[iCh] = '3'
			case 'l': aCh[iCh] = '1'
			else: aCh[iCh] = pChz[iCh]
		}
	}

//	assert(FAreCozEqual(aCh, "H311oTh3r3"), "bad string switch", #file, #line)

	aNOutput: [32] int
	pN: & int = aNOutput

	for i := 0; i < 4; ++i
	{
		`SwitchLabel
		switch i
		{
			case 1,2,3:
			{
				@pN++ = i
				if i > 1
				{ 
					while (1)
					{
						break SwitchLabel
					}
				}

				@pN++ = i+10
			} fallthrough 
			case -1:
				@pN++ = -1
		}
	}

//	VerifyArray({1,11,-1,2,3}, aNOutput)
}


main proc () -> int 
{

	TestOperators()
	TestPointers()
	TestIfElse()
	TestNestedMethod()
	TestInitializers()
	TestStructures()
	TestRecursion()
	TestTypedefs()
	TestEnums()
	TestArrays()
	TestCasting()
	TestOverloading()
	TestOperatorOverloading()
	TestGlobals()
	TestProcedureRef()
	TestHereStrings()
	TestLoops()
	TestBreakContinue()
	TestSwitch()

	printf("-- tests complete --\n")

	return 1
}

SLater struct
{
	ConstFour immutable := 4

	IntAlias typedef s32
	QuadArray typedef [ConstFour] IntAlias

	MEMB enum
	{
		One 	:= 1,
		Two,
		Three
	}
}

